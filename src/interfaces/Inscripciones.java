/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaces;

import cuartouta.Conexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author rem
 */
public class Inscripciones extends javax.swing.JInternalFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Inscripciones.class.getName());
    private final Conexion cn = new Conexion();
    private final Connection cc = cn.conectar();
    private final List<String> courseIds = new ArrayList<>();
    private boolean accionesHabilitadas = false;

    /**
     * Creates new form Inscripciones
     */
    public Inscripciones() {
        initComponents();
        botonesInicio();
        cargarEstudiantesEnLista();
        cargarCursosEnCombo();
        setupStudentSelectionHandler();
        setupCourseSelectionHandler();
        try {
            cc.setAutoCommit(true);
        } catch (SQLException ignore) {
        }
    }

    private void botonesInicio() {
        jbtnNuevi.setEnabled(true);
        jbtnAgregar.setEnabled(false);
        jbtnEliminar.setEnabled(false);
        jbtnCancelar.setEnabled(true);
        JlstEstudiantes.setEnabled(false);
        jComboBox1.setEnabled(false);
        accionesHabilitadas = false;
    }

    private void botonesNuevo() {
        jbtnNuevi.setEnabled(false);
        
        jbtnAgregar.setEnabled(false);
        jbtnEliminar.setEnabled(false);
        jbtnCancelar.setEnabled(true);
        JlstEstudiantes.setEnabled(true);
        jComboBox1.setEnabled(true);
        accionesHabilitadas = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JlstEstudiantes = new javax.swing.JList<>();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jbtnNuevi = new javax.swing.JButton();
        jbtnAgregar = new javax.swing.JButton();
        jbtnEliminar = new javax.swing.JButton();
        jbtnCancelar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtxtEstudiante = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLstCursos = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        JlstEstudiantes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(JlstEstudiantes);

        jLabel1.setText("Estudiante a Inscribir:");

        jLabel2.setText("Elija Un Curso:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jbtnNuevi.setText("Nuevo");
        jbtnNuevi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnNueviActionPerformed(evt);
            }
        });

        jbtnAgregar.setText("Agregar");
        jbtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAgregarActionPerformed(evt);
            }
        });

        jbtnEliminar.setText("Eliminar");
        jbtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEliminarActionPerformed(evt);
            }
        });

        jbtnCancelar.setText("Cancelar");
        jbtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtnNuevi, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtnCancelar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbtnNuevi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnAgregar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnCancelar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Estudiante:");

        jLabel4.setText("Curso al que pertenece:");

        jtxtEstudiante.setEditable(false);

        jScrollPane2.setViewportView(jLstCursos);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtxtEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtxtEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unused")
    private void jbtnNueviActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnNueviActionPerformed
        // TODO add your handling code here:
        botonesNuevo();
    }//GEN-LAST:event_jbtnNueviActionPerformed

    @SuppressWarnings("unused")
    private void jbtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelarActionPerformed
        botonesInicio();
        this.setVisible(false);
    }//GEN-LAST:event_jbtnCancelarActionPerformed

    private void jbtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAgregarActionPerformed
        agregarInscripcion();
    }//GEN-LAST:event_jbtnAgregarActionPerformed

    private void jbtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEliminarActionPerformed
        eliminarInscripcion();
    }//GEN-LAST:event_jbtnEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Inscripciones().setVisible(true));
    }

    private void cargarEstudiantesEnLista() {
        DefaultListModel<String> modelo = new DefaultListModel<>();
        String sql = "SELECT id_est, nom_est, ape_est FROM estudiantes ORDER BY nom_est, ape_est";
        try (Statement st = cc.createStatement(); ResultSet rs = st.executeQuery(sql)) {
            while (rs.next()) {
                String id = rs.getString("id_est");
                String nom = rs.getString("nom_est");
                String ape = rs.getString("ape_est");
                String item = id + " - " + nom + " " + ape;
                modelo.addElement(item);
            }
            JlstEstudiantes.setModel(modelo);
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "Error al cargar estudiantes", ex);
            JOptionPane.showMessageDialog(this, "Error al cargar estudiantes", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            logger.log(Level.SEVERE, "Error inesperado al cargar estudiantes", ex);
            JOptionPane.showMessageDialog(this, "Error inesperado al cargar estudiantes", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cargarCursosEnCombo() {
        DefaultComboBoxModel<String> modelo = new DefaultComboBoxModel<>();
        String sql = "SELECT id_cur, nom_cur FROM cursos ORDER BY nom_cur";
        try (Statement st = cc.createStatement(); ResultSet rs = st.executeQuery(sql)) {
            courseIds.clear();
            while (rs.next()) {
                String id = rs.getString("id_cur");
                String nombre = rs.getString("nom_cur");
                courseIds.add(id);
                modelo.addElement(nombre);
            }
            jComboBox1.setModel(modelo);
            if (modelo.getSize() > 0 && jComboBox1.getSelectedIndex() < 0) {
                jComboBox1.setSelectedIndex(0);
            }
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "Error al cargar cursos", ex);
            JOptionPane.showMessageDialog(this, "Error al cargar cursos", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            logger.log(Level.SEVERE, "Error inesperado al cargar cursos", ex);
            JOptionPane.showMessageDialog(this, "Error inesperado al cargar cursos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void setupStudentSelectionHandler() {
        JlstEstudiantes.addListSelectionListener(e -> {
            if (e.getValueIsAdjusting()) {
                return;
            }
            String selected = JlstEstudiantes.getSelectedValue();
            if (selected == null || selected.isBlank()) {
                jtxtEstudiante.setText("");
                // limpiar lista de cursos cuando no hay estudiante seleccionado
                jLstCursos.setModel(new DefaultListModel<>());
                jbtnAgregar.setEnabled(false);
                jbtnEliminar.setEnabled(false);
                return;
            }
            jtxtEstudiante.setText(selected);
            String idEst = selected;
            int sep = selected.indexOf(" - ");
            if (sep > -1) {
                idEst = selected.substring(0, sep).trim();
            }
            cargarCursosDeEstudianteEnLista(idEst);
            if (!accionesHabilitadas) {
                jbtnAgregar.setEnabled(false);
                jbtnEliminar.setEnabled(false);
            } else {
                // Con alumno seleccionado: permitir Agregar; Eliminar solo al seleccionar un curso
                jbtnAgregar.setEnabled(true);
                jbtnEliminar.setEnabled(false);
            }
        });
    }

    private void setupCourseSelectionHandler() {
        jLstCursos.addListSelectionListener(e -> {
            if (e.getValueIsAdjusting()) return;
            boolean hayCurso = jLstCursos.getSelectedValue() != null;
            jbtnEliminar.setEnabled(accionesHabilitadas && hayCurso);
        });
    }

    private String obtenerCursoPorEstudiante(String idEst) {
        String sql = "SELECT c.nom_cur FROM cursos c "
                + "JOIN inscripciones i ON c.id_cur = i.id_cur_ins "
                + "WHERE i.id_est_ins = ? LIMIT 1";
        try (PreparedStatement ps = cc.prepareStatement(sql)) {
            ps.setString(1, idEst);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getString("nom_cur");
                }
            }
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "Error al obtener curso por estudiante", ex);
        }
        return null;
    }

    private void cargarCursosDeEstudianteEnLista(String idEst) {
        DefaultListModel<String> modelo = new DefaultListModel<>();
        String sql = "SELECT c.nom_cur FROM cursos c JOIN inscripciones i ON c.id_cur = i.id_cur_ins WHERE i.id_est_ins = ? ORDER BY c.nom_cur";
        try (PreparedStatement ps = cc.prepareStatement(sql)) {
            ps.setString(1, idEst);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    modelo.addElement(rs.getString(1));
                }
            }
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "Error al cargar cursos del alumno", ex);
        }
        jLstCursos.setModel(modelo);
    }

    private String obtenerEstudianteIdSeleccionado() {
        String selected = JlstEstudiantes.getSelectedValue();
        if (selected == null) {
            return null;
        }
        int sep = selected.indexOf(" - ");
        return (sep > -1) ? selected.substring(0, sep).trim() : selected.trim();
    }

    private String obtenerCursoIdSeleccionado() {
        int idx = jComboBox1.getSelectedIndex();
        if (idx < 0 || idx >= courseIds.size()) {
            return null;
        }
        return courseIds.get(idx);
    }

    private String obtenerCursoIdPorNombre(String nombre) {
        String sql = "SELECT id_cur FROM cursos WHERE nom_cur = ? LIMIT 1";
        try (PreparedStatement ps = cc.prepareStatement(sql)) {
            ps.setString(1, nombre);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getString("id_cur");
                }
            }
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "Error al obtener id de curso por nombre", ex);
        }
        return null;
    }

    private void desasignarCursoEspecifico(String idEst, String idCur) throws SQLException {
        String sql = "DELETE FROM inscripciones WHERE id_est_ins = ? AND id_cur_ins = ?";
        try (PreparedStatement ps = cc.prepareStatement(sql)) {
            ps.setString(1, idEst);
            ps.setString(2, idCur);
            ps.executeUpdate();
        }
    }

    private int asignarCursoAEstudiante(String idCur, String idEst) throws SQLException {
        String sql = "INSERT INTO inscripciones(id_est_ins,id_cur_ins) VALUES(?,?);";
        try (PreparedStatement ps = cc.prepareStatement(sql)) {
            ps.setString(1, idEst);
            ps.setString(2, idCur);
            return ps.executeUpdate();
        }
    }

    private int asignarCursoAEstudianteForzado(String idCur, String idEst) throws SQLException {
        String sql = "UPDATE inscripciones SET id_cur_ins = ? WHERE id_est_ins = ?";
        try (PreparedStatement ps = cc.prepareStatement(sql)) {
            ps.setString(1, idCur);
            ps.setString(2, idEst);
            return ps.executeUpdate();
        }
    }
    
    private boolean existeInscripcion(String idEst, String idCur) {
        String sql = "SELECT 1 FROM inscripciones WHERE id_est_ins = ? AND id_cur_ins = ? LIMIT 1";
        try (PreparedStatement ps = cc.prepareStatement(sql)) {
            ps.setString(1, idEst);
            ps.setString(2, idCur);
            try (ResultSet rs = ps.executeQuery()) {
                return rs.next();
            }
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "Error al verificar inscripción existente", ex);
            return false;
        }
    }

    private void agregarInscripcion(){
        if (!accionesHabilitadas) {
            return;
        }
        String idEst = obtenerEstudianteIdSeleccionado();
        String idCur = obtenerCursoIdSeleccionado();

        if (idCur == null) {
            Object sel = jComboBox1.getSelectedItem();
            if (sel != null) {
                idCur = obtenerCursoIdPorNombre(sel.toString());
            }
        }
        if (idEst == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un estudiante", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (idCur == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un curso", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            if (existeInscripcion(idEst, idCur)) {
                JOptionPane.showMessageDialog(this, "El estudiante ya está inscrito en ese curso.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            int updated = asignarCursoAEstudiante(idCur, idEst);

            if (updated > 0) {
                logger.log(Level.INFO, "Asignación realizada - curso: {0}, estudiante: {1}", new Object[]{idCur, idEst});
                JOptionPane.showMessageDialog(this, "Curso agregado correctamente.", "Asignación", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo agregar el curso.", "Sin cambios", JOptionPane.WARNING_MESSAGE);
            }
            cargarCursosDeEstudianteEnLista(idEst);
            // Tras agregar: permitir seguir agregando; eliminar queda a la espera de selección
            jbtnAgregar.setEnabled(true);
            jbtnEliminar.setEnabled(false);
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "Error al guardar asignación", ex);
            JOptionPane.showMessageDialog(this, "Error al agregar curso", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void eliminarInscripcion(){
        if (!accionesHabilitadas) {
            return;
        }
        String idEst = obtenerEstudianteIdSeleccionado();
        String cursoNombre = jLstCursos.getSelectedValue();
        if (idEst == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un estudiante", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (cursoNombre == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un curso en la lista", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            String idCur = obtenerCursoIdPorNombre(cursoNombre);
            if (idCur == null) {
                JOptionPane.showMessageDialog(this, "No se pudo identificar el curso seleccionado", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int confirm = JOptionPane.showConfirmDialog(this, "¿Eliminar el curso '" + cursoNombre + "' del alumno?", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (confirm != JOptionPane.YES_OPTION) {
                return;
            }

            desasignarCursoEspecifico(idEst, idCur);
            JOptionPane.showMessageDialog(this, "Curso eliminado.", "Eliminado", JOptionPane.INFORMATION_MESSAGE);

            cargarCursosDeEstudianteEnLista(idEst);
            jbtnAgregar.setEnabled(true);
            jbtnEliminar.setEnabled(false);
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "Error al eliminar asignación", ex);
            JOptionPane.showMessageDialog(this, "Error al eliminar relación", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
                                                                                                                            

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> JlstEstudiantes;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jLstCursos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnAgregar;
    private javax.swing.JButton jbtnCancelar;
    private javax.swing.JButton jbtnEliminar;
    private javax.swing.JButton jbtnNuevi;
    private javax.swing.JTextField jtxtEstudiante;
    // End of variables declaration//GEN-END:variables
}
